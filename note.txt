//page.js

import mongoose from "mongoose";
import dbConnect from "../../../../lib/mongo";
import { NextResponse } from "next/server";
import Product from "../../../../models/product";

export default async function POST(req) {
  const { method, payload } = req;
  console.log(req);
  // let payload = await req.json();

  if (method === "POST") {
    try {
      await mongoose.connect(dbConnect);

      const product = new Product(payload);
      const result = await product.save();

      return NextResponse.json({ result, success: true });
    } catch (error) {
      return NextResponse.json({ error, success: false }, { status: 500 });
    }
  } else {
    return NextResponse.json(
      { message: "Method Not Allowed" },
      { status: 405 }
    );
  }
}

//mongo.js

import mongoose from 'mongoose'

const MONGO_URL = process.env.MONGO_URL

if (!MONGO_URL) {
  throw new Error(
    'Please define the MONGO_URL environment variable inside .env.local'
  )
}

/**
 * Global is used here to maintain a cached connection across hot reloads
 * in development. This prevents connections growing exponentially
 * during API Route usage.
 */
let cached = global.mongoose

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null }
}

async function dbConnect() {
  if (cached.conn) {
    return cached.conn
  }

  if (!cached.promise) {
    const opts = {
      bufferCommands: false,
    }

    cached.promise = mongoose.connect(MONGO_URL, opts).then((mongoose) => {
      return mongoose
    })
  }
  cached.conn = await cached.promise
  return cached.conn
}

export default dbConnect
